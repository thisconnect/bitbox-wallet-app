// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/digitalbitbox/bitbox-wallet-app/backend/coins/eth/rpcclient"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"math/big"
	"sync"
)

var (
	lockInterfaceMockBalanceAt                         sync.RWMutex
	lockInterfaceMockCallContract                      sync.RWMutex
	lockInterfaceMockCodeAt                            sync.RWMutex
	lockInterfaceMockEstimateGas                       sync.RWMutex
	lockInterfaceMockFilterLogs                        sync.RWMutex
	lockInterfaceMockHeaderByNumber                    sync.RWMutex
	lockInterfaceMockPendingCodeAt                     sync.RWMutex
	lockInterfaceMockPendingNonceAt                    sync.RWMutex
	lockInterfaceMockSendTransaction                   sync.RWMutex
	lockInterfaceMockSubscribeFilterLogs               sync.RWMutex
	lockInterfaceMockSuggestGasPrice                   sync.RWMutex
	lockInterfaceMockSuggestGasTipCap                  sync.RWMutex
	lockInterfaceMockTransactionByHash                 sync.RWMutex
	lockInterfaceMockTransactionReceiptWithBlockNumber sync.RWMutex
)

// Ensure, that InterfaceMock does implement rpcclient.Interface.
// If this is not the case, regenerate this file with moq.
var _ rpcclient.Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of rpcclient.Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked rpcclient.Interface
//         mockedInterface := &InterfaceMock{
//             BalanceAtFunc: func(ctx context.Context, account common.Address, blockNumber *big.Int) (*big.Int, error) {
// 	               panic("mock out the BalanceAt method")
//             },
//             CallContractFunc: func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
// 	               panic("mock out the CallContract method")
//             },
//             CodeAtFunc: func(ctx context.Context, contract common.Address, blockNumber *big.Int) ([]byte, error) {
// 	               panic("mock out the CodeAt method")
//             },
//             EstimateGasFunc: func(ctx context.Context, call ethereum.CallMsg) (uint64, error) {
// 	               panic("mock out the EstimateGas method")
//             },
//             FilterLogsFunc: func(ctx context.Context, query ethereum.FilterQuery) ([]types.Log, error) {
// 	               panic("mock out the FilterLogs method")
//             },
//             HeaderByNumberFunc: func(ctx context.Context, number *big.Int) (*types.Header, error) {
// 	               panic("mock out the HeaderByNumber method")
//             },
//             PendingCodeAtFunc: func(ctx context.Context, account common.Address) ([]byte, error) {
// 	               panic("mock out the PendingCodeAt method")
//             },
//             PendingNonceAtFunc: func(ctx context.Context, account common.Address) (uint64, error) {
// 	               panic("mock out the PendingNonceAt method")
//             },
//             SendTransactionFunc: func(ctx context.Context, tx *types.Transaction) error {
// 	               panic("mock out the SendTransaction method")
//             },
//             SubscribeFilterLogsFunc: func(ctx context.Context, query ethereum.FilterQuery, ch chan<- types.Log) (ethereum.Subscription, error) {
// 	               panic("mock out the SubscribeFilterLogs method")
//             },
//             SuggestGasPriceFunc: func(ctx context.Context) (*big.Int, error) {
// 	               panic("mock out the SuggestGasPrice method")
//             },
//             SuggestGasTipCapFunc: func(ctx context.Context) (*big.Int, error) {
// 	               panic("mock out the SuggestGasTipCap method")
//             },
//             TransactionByHashFunc: func(ctx context.Context, hash common.Hash) (*types.Transaction, bool, error) {
// 	               panic("mock out the TransactionByHash method")
//             },
//             TransactionReceiptWithBlockNumberFunc: func(ctx context.Context, hash common.Hash) (*rpcclient.RPCTransactionReceipt, error) {
// 	               panic("mock out the TransactionReceiptWithBlockNumber method")
//             },
//         }
//
//         // use mockedInterface in code that requires rpcclient.Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// BalanceAtFunc mocks the BalanceAt method.
	BalanceAtFunc func(ctx context.Context, account common.Address, blockNumber *big.Int) (*big.Int, error)

	// CallContractFunc mocks the CallContract method.
	CallContractFunc func(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error)

	// CodeAtFunc mocks the CodeAt method.
	CodeAtFunc func(ctx context.Context, contract common.Address, blockNumber *big.Int) ([]byte, error)

	// EstimateGasFunc mocks the EstimateGas method.
	EstimateGasFunc func(ctx context.Context, call ethereum.CallMsg) (uint64, error)

	// FilterLogsFunc mocks the FilterLogs method.
	FilterLogsFunc func(ctx context.Context, query ethereum.FilterQuery) ([]types.Log, error)

	// HeaderByNumberFunc mocks the HeaderByNumber method.
	HeaderByNumberFunc func(ctx context.Context, number *big.Int) (*types.Header, error)

	// PendingCodeAtFunc mocks the PendingCodeAt method.
	PendingCodeAtFunc func(ctx context.Context, account common.Address) ([]byte, error)

	// PendingNonceAtFunc mocks the PendingNonceAt method.
	PendingNonceAtFunc func(ctx context.Context, account common.Address) (uint64, error)

	// SendTransactionFunc mocks the SendTransaction method.
	SendTransactionFunc func(ctx context.Context, tx *types.Transaction) error

	// SubscribeFilterLogsFunc mocks the SubscribeFilterLogs method.
	SubscribeFilterLogsFunc func(ctx context.Context, query ethereum.FilterQuery, ch chan<- types.Log) (ethereum.Subscription, error)

	// SuggestGasPriceFunc mocks the SuggestGasPrice method.
	SuggestGasPriceFunc func(ctx context.Context) (*big.Int, error)

	// SuggestGasTipCapFunc mocks the SuggestGasTipCap method.
	SuggestGasTipCapFunc func(ctx context.Context) (*big.Int, error)

	// TransactionByHashFunc mocks the TransactionByHash method.
	TransactionByHashFunc func(ctx context.Context, hash common.Hash) (*types.Transaction, bool, error)

	// TransactionReceiptWithBlockNumberFunc mocks the TransactionReceiptWithBlockNumber method.
	TransactionReceiptWithBlockNumberFunc func(ctx context.Context, hash common.Hash) (*rpcclient.RPCTransactionReceipt, error)

	// calls tracks calls to the methods.
	calls struct {
		// BalanceAt holds details about calls to the BalanceAt method.
		BalanceAt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account common.Address
			// BlockNumber is the blockNumber argument value.
			BlockNumber *big.Int
		}
		// CallContract holds details about calls to the CallContract method.
		CallContract []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Call is the call argument value.
			Call ethereum.CallMsg
			// BlockNumber is the blockNumber argument value.
			BlockNumber *big.Int
		}
		// CodeAt holds details about calls to the CodeAt method.
		CodeAt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Contract is the contract argument value.
			Contract common.Address
			// BlockNumber is the blockNumber argument value.
			BlockNumber *big.Int
		}
		// EstimateGas holds details about calls to the EstimateGas method.
		EstimateGas []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Call is the call argument value.
			Call ethereum.CallMsg
		}
		// FilterLogs holds details about calls to the FilterLogs method.
		FilterLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query ethereum.FilterQuery
		}
		// HeaderByNumber holds details about calls to the HeaderByNumber method.
		HeaderByNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Number is the number argument value.
			Number *big.Int
		}
		// PendingCodeAt holds details about calls to the PendingCodeAt method.
		PendingCodeAt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account common.Address
		}
		// PendingNonceAt holds details about calls to the PendingNonceAt method.
		PendingNonceAt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Account is the account argument value.
			Account common.Address
		}
		// SendTransaction holds details about calls to the SendTransaction method.
		SendTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx *types.Transaction
		}
		// SubscribeFilterLogs holds details about calls to the SubscribeFilterLogs method.
		SubscribeFilterLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query ethereum.FilterQuery
			// Ch is the ch argument value.
			Ch chan<- types.Log
		}
		// SuggestGasPrice holds details about calls to the SuggestGasPrice method.
		SuggestGasPrice []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SuggestGasTipCap holds details about calls to the SuggestGasTipCap method.
		SuggestGasTipCap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// TransactionByHash holds details about calls to the TransactionByHash method.
		TransactionByHash []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash common.Hash
		}
		// TransactionReceiptWithBlockNumber holds details about calls to the TransactionReceiptWithBlockNumber method.
		TransactionReceiptWithBlockNumber []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Hash is the hash argument value.
			Hash common.Hash
		}
	}
}

// BalanceAt calls BalanceAtFunc.
func (mock *InterfaceMock) BalanceAt(ctx context.Context, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	if mock.BalanceAtFunc == nil {
		panic("InterfaceMock.BalanceAtFunc: method is nil but Interface.BalanceAt was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Account     common.Address
		BlockNumber *big.Int
	}{
		Ctx:         ctx,
		Account:     account,
		BlockNumber: blockNumber,
	}
	lockInterfaceMockBalanceAt.Lock()
	mock.calls.BalanceAt = append(mock.calls.BalanceAt, callInfo)
	lockInterfaceMockBalanceAt.Unlock()
	return mock.BalanceAtFunc(ctx, account, blockNumber)
}

// BalanceAtCalls gets all the calls that were made to BalanceAt.
// Check the length with:
//     len(mockedInterface.BalanceAtCalls())
func (mock *InterfaceMock) BalanceAtCalls() []struct {
	Ctx         context.Context
	Account     common.Address
	BlockNumber *big.Int
} {
	var calls []struct {
		Ctx         context.Context
		Account     common.Address
		BlockNumber *big.Int
	}
	lockInterfaceMockBalanceAt.RLock()
	calls = mock.calls.BalanceAt
	lockInterfaceMockBalanceAt.RUnlock()
	return calls
}

// CallContract calls CallContractFunc.
func (mock *InterfaceMock) CallContract(ctx context.Context, call ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	if mock.CallContractFunc == nil {
		panic("InterfaceMock.CallContractFunc: method is nil but Interface.CallContract was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Call        ethereum.CallMsg
		BlockNumber *big.Int
	}{
		Ctx:         ctx,
		Call:        call,
		BlockNumber: blockNumber,
	}
	lockInterfaceMockCallContract.Lock()
	mock.calls.CallContract = append(mock.calls.CallContract, callInfo)
	lockInterfaceMockCallContract.Unlock()
	return mock.CallContractFunc(ctx, call, blockNumber)
}

// CallContractCalls gets all the calls that were made to CallContract.
// Check the length with:
//     len(mockedInterface.CallContractCalls())
func (mock *InterfaceMock) CallContractCalls() []struct {
	Ctx         context.Context
	Call        ethereum.CallMsg
	BlockNumber *big.Int
} {
	var calls []struct {
		Ctx         context.Context
		Call        ethereum.CallMsg
		BlockNumber *big.Int
	}
	lockInterfaceMockCallContract.RLock()
	calls = mock.calls.CallContract
	lockInterfaceMockCallContract.RUnlock()
	return calls
}

// CodeAt calls CodeAtFunc.
func (mock *InterfaceMock) CodeAt(ctx context.Context, contract common.Address, blockNumber *big.Int) ([]byte, error) {
	if mock.CodeAtFunc == nil {
		panic("InterfaceMock.CodeAtFunc: method is nil but Interface.CodeAt was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Contract    common.Address
		BlockNumber *big.Int
	}{
		Ctx:         ctx,
		Contract:    contract,
		BlockNumber: blockNumber,
	}
	lockInterfaceMockCodeAt.Lock()
	mock.calls.CodeAt = append(mock.calls.CodeAt, callInfo)
	lockInterfaceMockCodeAt.Unlock()
	return mock.CodeAtFunc(ctx, contract, blockNumber)
}

// CodeAtCalls gets all the calls that were made to CodeAt.
// Check the length with:
//     len(mockedInterface.CodeAtCalls())
func (mock *InterfaceMock) CodeAtCalls() []struct {
	Ctx         context.Context
	Contract    common.Address
	BlockNumber *big.Int
} {
	var calls []struct {
		Ctx         context.Context
		Contract    common.Address
		BlockNumber *big.Int
	}
	lockInterfaceMockCodeAt.RLock()
	calls = mock.calls.CodeAt
	lockInterfaceMockCodeAt.RUnlock()
	return calls
}

// EstimateGas calls EstimateGasFunc.
func (mock *InterfaceMock) EstimateGas(ctx context.Context, call ethereum.CallMsg) (uint64, error) {
	if mock.EstimateGasFunc == nil {
		panic("InterfaceMock.EstimateGasFunc: method is nil but Interface.EstimateGas was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Call ethereum.CallMsg
	}{
		Ctx:  ctx,
		Call: call,
	}
	lockInterfaceMockEstimateGas.Lock()
	mock.calls.EstimateGas = append(mock.calls.EstimateGas, callInfo)
	lockInterfaceMockEstimateGas.Unlock()
	return mock.EstimateGasFunc(ctx, call)
}

// EstimateGasCalls gets all the calls that were made to EstimateGas.
// Check the length with:
//     len(mockedInterface.EstimateGasCalls())
func (mock *InterfaceMock) EstimateGasCalls() []struct {
	Ctx  context.Context
	Call ethereum.CallMsg
} {
	var calls []struct {
		Ctx  context.Context
		Call ethereum.CallMsg
	}
	lockInterfaceMockEstimateGas.RLock()
	calls = mock.calls.EstimateGas
	lockInterfaceMockEstimateGas.RUnlock()
	return calls
}

// FilterLogs calls FilterLogsFunc.
func (mock *InterfaceMock) FilterLogs(ctx context.Context, query ethereum.FilterQuery) ([]types.Log, error) {
	if mock.FilterLogsFunc == nil {
		panic("InterfaceMock.FilterLogsFunc: method is nil but Interface.FilterLogs was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query ethereum.FilterQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	lockInterfaceMockFilterLogs.Lock()
	mock.calls.FilterLogs = append(mock.calls.FilterLogs, callInfo)
	lockInterfaceMockFilterLogs.Unlock()
	return mock.FilterLogsFunc(ctx, query)
}

// FilterLogsCalls gets all the calls that were made to FilterLogs.
// Check the length with:
//     len(mockedInterface.FilterLogsCalls())
func (mock *InterfaceMock) FilterLogsCalls() []struct {
	Ctx   context.Context
	Query ethereum.FilterQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query ethereum.FilterQuery
	}
	lockInterfaceMockFilterLogs.RLock()
	calls = mock.calls.FilterLogs
	lockInterfaceMockFilterLogs.RUnlock()
	return calls
}

// HeaderByNumber calls HeaderByNumberFunc.
func (mock *InterfaceMock) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	if mock.HeaderByNumberFunc == nil {
		panic("InterfaceMock.HeaderByNumberFunc: method is nil but Interface.HeaderByNumber was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Number *big.Int
	}{
		Ctx:    ctx,
		Number: number,
	}
	lockInterfaceMockHeaderByNumber.Lock()
	mock.calls.HeaderByNumber = append(mock.calls.HeaderByNumber, callInfo)
	lockInterfaceMockHeaderByNumber.Unlock()
	return mock.HeaderByNumberFunc(ctx, number)
}

// HeaderByNumberCalls gets all the calls that were made to HeaderByNumber.
// Check the length with:
//     len(mockedInterface.HeaderByNumberCalls())
func (mock *InterfaceMock) HeaderByNumberCalls() []struct {
	Ctx    context.Context
	Number *big.Int
} {
	var calls []struct {
		Ctx    context.Context
		Number *big.Int
	}
	lockInterfaceMockHeaderByNumber.RLock()
	calls = mock.calls.HeaderByNumber
	lockInterfaceMockHeaderByNumber.RUnlock()
	return calls
}

// PendingCodeAt calls PendingCodeAtFunc.
func (mock *InterfaceMock) PendingCodeAt(ctx context.Context, account common.Address) ([]byte, error) {
	if mock.PendingCodeAtFunc == nil {
		panic("InterfaceMock.PendingCodeAtFunc: method is nil but Interface.PendingCodeAt was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account common.Address
	}{
		Ctx:     ctx,
		Account: account,
	}
	lockInterfaceMockPendingCodeAt.Lock()
	mock.calls.PendingCodeAt = append(mock.calls.PendingCodeAt, callInfo)
	lockInterfaceMockPendingCodeAt.Unlock()
	return mock.PendingCodeAtFunc(ctx, account)
}

// PendingCodeAtCalls gets all the calls that were made to PendingCodeAt.
// Check the length with:
//     len(mockedInterface.PendingCodeAtCalls())
func (mock *InterfaceMock) PendingCodeAtCalls() []struct {
	Ctx     context.Context
	Account common.Address
} {
	var calls []struct {
		Ctx     context.Context
		Account common.Address
	}
	lockInterfaceMockPendingCodeAt.RLock()
	calls = mock.calls.PendingCodeAt
	lockInterfaceMockPendingCodeAt.RUnlock()
	return calls
}

// PendingNonceAt calls PendingNonceAtFunc.
func (mock *InterfaceMock) PendingNonceAt(ctx context.Context, account common.Address) (uint64, error) {
	if mock.PendingNonceAtFunc == nil {
		panic("InterfaceMock.PendingNonceAtFunc: method is nil but Interface.PendingNonceAt was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Account common.Address
	}{
		Ctx:     ctx,
		Account: account,
	}
	lockInterfaceMockPendingNonceAt.Lock()
	mock.calls.PendingNonceAt = append(mock.calls.PendingNonceAt, callInfo)
	lockInterfaceMockPendingNonceAt.Unlock()
	return mock.PendingNonceAtFunc(ctx, account)
}

// PendingNonceAtCalls gets all the calls that were made to PendingNonceAt.
// Check the length with:
//     len(mockedInterface.PendingNonceAtCalls())
func (mock *InterfaceMock) PendingNonceAtCalls() []struct {
	Ctx     context.Context
	Account common.Address
} {
	var calls []struct {
		Ctx     context.Context
		Account common.Address
	}
	lockInterfaceMockPendingNonceAt.RLock()
	calls = mock.calls.PendingNonceAt
	lockInterfaceMockPendingNonceAt.RUnlock()
	return calls
}

// SendTransaction calls SendTransactionFunc.
func (mock *InterfaceMock) SendTransaction(ctx context.Context, tx *types.Transaction) error {
	if mock.SendTransactionFunc == nil {
		panic("InterfaceMock.SendTransactionFunc: method is nil but Interface.SendTransaction was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Tx  *types.Transaction
	}{
		Ctx: ctx,
		Tx:  tx,
	}
	lockInterfaceMockSendTransaction.Lock()
	mock.calls.SendTransaction = append(mock.calls.SendTransaction, callInfo)
	lockInterfaceMockSendTransaction.Unlock()
	return mock.SendTransactionFunc(ctx, tx)
}

// SendTransactionCalls gets all the calls that were made to SendTransaction.
// Check the length with:
//     len(mockedInterface.SendTransactionCalls())
func (mock *InterfaceMock) SendTransactionCalls() []struct {
	Ctx context.Context
	Tx  *types.Transaction
} {
	var calls []struct {
		Ctx context.Context
		Tx  *types.Transaction
	}
	lockInterfaceMockSendTransaction.RLock()
	calls = mock.calls.SendTransaction
	lockInterfaceMockSendTransaction.RUnlock()
	return calls
}

// SubscribeFilterLogs calls SubscribeFilterLogsFunc.
func (mock *InterfaceMock) SubscribeFilterLogs(ctx context.Context, query ethereum.FilterQuery, ch chan<- types.Log) (ethereum.Subscription, error) {
	if mock.SubscribeFilterLogsFunc == nil {
		panic("InterfaceMock.SubscribeFilterLogsFunc: method is nil but Interface.SubscribeFilterLogs was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query ethereum.FilterQuery
		Ch    chan<- types.Log
	}{
		Ctx:   ctx,
		Query: query,
		Ch:    ch,
	}
	lockInterfaceMockSubscribeFilterLogs.Lock()
	mock.calls.SubscribeFilterLogs = append(mock.calls.SubscribeFilterLogs, callInfo)
	lockInterfaceMockSubscribeFilterLogs.Unlock()
	return mock.SubscribeFilterLogsFunc(ctx, query, ch)
}

// SubscribeFilterLogsCalls gets all the calls that were made to SubscribeFilterLogs.
// Check the length with:
//     len(mockedInterface.SubscribeFilterLogsCalls())
func (mock *InterfaceMock) SubscribeFilterLogsCalls() []struct {
	Ctx   context.Context
	Query ethereum.FilterQuery
	Ch    chan<- types.Log
} {
	var calls []struct {
		Ctx   context.Context
		Query ethereum.FilterQuery
		Ch    chan<- types.Log
	}
	lockInterfaceMockSubscribeFilterLogs.RLock()
	calls = mock.calls.SubscribeFilterLogs
	lockInterfaceMockSubscribeFilterLogs.RUnlock()
	return calls
}

// SuggestGasPrice calls SuggestGasPriceFunc.
func (mock *InterfaceMock) SuggestGasPrice(ctx context.Context) (*big.Int, error) {
	if mock.SuggestGasPriceFunc == nil {
		panic("InterfaceMock.SuggestGasPriceFunc: method is nil but Interface.SuggestGasPrice was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockInterfaceMockSuggestGasPrice.Lock()
	mock.calls.SuggestGasPrice = append(mock.calls.SuggestGasPrice, callInfo)
	lockInterfaceMockSuggestGasPrice.Unlock()
	return mock.SuggestGasPriceFunc(ctx)
}

// SuggestGasPriceCalls gets all the calls that were made to SuggestGasPrice.
// Check the length with:
//     len(mockedInterface.SuggestGasPriceCalls())
func (mock *InterfaceMock) SuggestGasPriceCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockInterfaceMockSuggestGasPrice.RLock()
	calls = mock.calls.SuggestGasPrice
	lockInterfaceMockSuggestGasPrice.RUnlock()
	return calls
}

// SuggestGasTipCap calls SuggestGasTipCapFunc.
func (mock *InterfaceMock) SuggestGasTipCap(ctx context.Context) (*big.Int, error) {
	if mock.SuggestGasTipCapFunc == nil {
		panic("InterfaceMock.SuggestGasTipCapFunc: method is nil but Interface.SuggestGasTipCap was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockInterfaceMockSuggestGasTipCap.Lock()
	mock.calls.SuggestGasTipCap = append(mock.calls.SuggestGasTipCap, callInfo)
	lockInterfaceMockSuggestGasTipCap.Unlock()
	return mock.SuggestGasTipCapFunc(ctx)
}

// SuggestGasTipCapCalls gets all the calls that were made to SuggestGasTipCap.
// Check the length with:
//     len(mockedInterface.SuggestGasTipCapCalls())
func (mock *InterfaceMock) SuggestGasTipCapCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockInterfaceMockSuggestGasTipCap.RLock()
	calls = mock.calls.SuggestGasTipCap
	lockInterfaceMockSuggestGasTipCap.RUnlock()
	return calls
}

// TransactionByHash calls TransactionByHashFunc.
func (mock *InterfaceMock) TransactionByHash(ctx context.Context, hash common.Hash) (*types.Transaction, bool, error) {
	if mock.TransactionByHashFunc == nil {
		panic("InterfaceMock.TransactionByHashFunc: method is nil but Interface.TransactionByHash was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash common.Hash
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	lockInterfaceMockTransactionByHash.Lock()
	mock.calls.TransactionByHash = append(mock.calls.TransactionByHash, callInfo)
	lockInterfaceMockTransactionByHash.Unlock()
	return mock.TransactionByHashFunc(ctx, hash)
}

// TransactionByHashCalls gets all the calls that were made to TransactionByHash.
// Check the length with:
//     len(mockedInterface.TransactionByHashCalls())
func (mock *InterfaceMock) TransactionByHashCalls() []struct {
	Ctx  context.Context
	Hash common.Hash
} {
	var calls []struct {
		Ctx  context.Context
		Hash common.Hash
	}
	lockInterfaceMockTransactionByHash.RLock()
	calls = mock.calls.TransactionByHash
	lockInterfaceMockTransactionByHash.RUnlock()
	return calls
}

// TransactionReceiptWithBlockNumber calls TransactionReceiptWithBlockNumberFunc.
func (mock *InterfaceMock) TransactionReceiptWithBlockNumber(ctx context.Context, hash common.Hash) (*rpcclient.RPCTransactionReceipt, error) {
	if mock.TransactionReceiptWithBlockNumberFunc == nil {
		panic("InterfaceMock.TransactionReceiptWithBlockNumberFunc: method is nil but Interface.TransactionReceiptWithBlockNumber was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Hash common.Hash
	}{
		Ctx:  ctx,
		Hash: hash,
	}
	lockInterfaceMockTransactionReceiptWithBlockNumber.Lock()
	mock.calls.TransactionReceiptWithBlockNumber = append(mock.calls.TransactionReceiptWithBlockNumber, callInfo)
	lockInterfaceMockTransactionReceiptWithBlockNumber.Unlock()
	return mock.TransactionReceiptWithBlockNumberFunc(ctx, hash)
}

// TransactionReceiptWithBlockNumberCalls gets all the calls that were made to TransactionReceiptWithBlockNumber.
// Check the length with:
//     len(mockedInterface.TransactionReceiptWithBlockNumberCalls())
func (mock *InterfaceMock) TransactionReceiptWithBlockNumberCalls() []struct {
	Ctx  context.Context
	Hash common.Hash
} {
	var calls []struct {
		Ctx  context.Context
		Hash common.Hash
	}
	lockInterfaceMockTransactionReceiptWithBlockNumber.RLock()
	calls = mock.calls.TransactionReceiptWithBlockNumber
	lockInterfaceMockTransactionReceiptWithBlockNumber.RUnlock()
	return calls
}
